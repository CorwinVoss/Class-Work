Fill in the blank for each of the following data types. 
If a variable could be stored in choose from the following: double, int 
Comments are provided to indicate the expected output after certain lines.

___ num1  = 7;
___ num2  = 3;
___ num3  = 7;
___ num4  = 3;
___ result1  = num1/num2; //result1 should be 2 after this instruction
___ result2  = num3/num4; //result2 should be 2.3333(Shortend here for display reasons) after this instruction
___ var5  = 12.5;
___ var6  = 1337;
double result3  = 11/(___)var5; // blank on right side of = is for a data conversion (numeric to numeric)- still should be double or int
___ result4  = 11/var5; //result3 should be 0.0 and result4 should be 0.8627450980392157 



/*Answer the follow questions: 
Why does the value for result1 differ from that of result2?
What is the reason that result3 differs from result4?

What reason can you think of that in some cases the precison is lost before it gets saved in a memory.  Or in other words why are 
all intermediate calculations prior to being stored into memory, not calculated as doubles and then converted when into memory/variables.
	- For this one knowing that Processors have different "execute" hardware that preforms math operations for floating point number and integers 
		might give you a hint. 
		
If you added the following code to the end of the above program, would it work?
result1 = num3/num4; //result should be 2.3333 
if not what could you change to make it work?  note the original calculated value of result1 (5th instruction) should still be 2, but then will
be updated to 2.3333 after the new line of code is added. 
*/